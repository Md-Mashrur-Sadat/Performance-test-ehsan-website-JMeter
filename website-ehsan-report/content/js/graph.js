/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 786.0, "minX": 0.0, "maxY": 22906.0, "series": [{"data": [[0.0, 786.0], [0.1, 786.0], [0.2, 789.0], [0.3, 809.0], [0.4, 853.0], [0.5, 920.0], [0.6, 920.0], [0.7, 924.0], [0.8, 944.0], [0.9, 956.0], [1.0, 1038.0], [1.1, 1038.0], [1.2, 1038.0], [1.3, 1038.0], [1.4, 1088.0], [1.5, 1089.0], [1.6, 1089.0], [1.7, 1135.0], [1.8, 1175.0], [1.9, 1181.0], [2.0, 1199.0], [2.1, 1199.0], [2.2, 1206.0], [2.3, 1231.0], [2.4, 1232.0], [2.5, 1313.0], [2.6, 1313.0], [2.7, 1374.0], [2.8, 1406.0], [2.9, 1417.0], [3.0, 1429.0], [3.1, 1429.0], [3.2, 1431.0], [3.3, 1434.0], [3.4, 1451.0], [3.5, 1458.0], [3.6, 1458.0], [3.7, 1463.0], [3.8, 1473.0], [3.9, 1479.0], [4.0, 1500.0], [4.1, 1500.0], [4.2, 1506.0], [4.3, 1517.0], [4.4, 1520.0], [4.5, 1529.0], [4.6, 1529.0], [4.7, 1536.0], [4.8, 1539.0], [4.9, 1551.0], [5.0, 1556.0], [5.1, 1556.0], [5.2, 1558.0], [5.3, 1565.0], [5.4, 1566.0], [5.5, 1569.0], [5.6, 1569.0], [5.7, 1572.0], [5.8, 1586.0], [5.9, 1598.0], [6.0, 1599.0], [6.1, 1599.0], [6.2, 1622.0], [6.3, 1639.0], [6.4, 1656.0], [6.5, 1684.0], [6.6, 1684.0], [6.7, 1700.0], [6.8, 1707.0], [6.9, 1728.0], [7.0, 1737.0], [7.1, 1737.0], [7.2, 1749.0], [7.3, 1751.0], [7.4, 1752.0], [7.5, 1760.0], [7.6, 1760.0], [7.7, 1774.0], [7.8, 1800.0], [7.9, 1807.0], [8.0, 1814.0], [8.1, 1814.0], [8.2, 1814.0], [8.3, 1817.0], [8.4, 1827.0], [8.5, 1854.0], [8.6, 1854.0], [8.7, 1855.0], [8.8, 1865.0], [8.9, 1872.0], [9.0, 1891.0], [9.1, 1891.0], [9.2, 1919.0], [9.3, 1922.0], [9.4, 1925.0], [9.5, 1925.0], [9.6, 1925.0], [9.7, 1925.0], [9.8, 1931.0], [9.9, 1934.0], [10.0, 1935.0], [10.1, 1935.0], [10.2, 1949.0], [10.3, 1955.0], [10.4, 1967.0], [10.5, 1972.0], [10.6, 1972.0], [10.7, 1972.0], [10.8, 1990.0], [10.9, 1999.0], [11.0, 2008.0], [11.1, 2008.0], [11.2, 2009.0], [11.3, 2014.0], [11.4, 2070.0], [11.5, 2074.0], [11.6, 2074.0], [11.7, 2080.0], [11.8, 2089.0], [11.9, 2108.0], [12.0, 2112.0], [12.1, 2112.0], [12.2, 2127.0], [12.3, 2140.0], [12.4, 2150.0], [12.5, 2153.0], [12.6, 2153.0], [12.7, 2158.0], [12.8, 2167.0], [12.9, 2181.0], [13.0, 2186.0], [13.1, 2186.0], [13.2, 2188.0], [13.3, 2195.0], [13.4, 2198.0], [13.5, 2201.0], [13.6, 2201.0], [13.7, 2202.0], [13.8, 2214.0], [13.9, 2215.0], [14.0, 2218.0], [14.1, 2218.0], [14.2, 2221.0], [14.3, 2227.0], [14.4, 2236.0], [14.5, 2251.0], [14.6, 2251.0], [14.7, 2258.0], [14.8, 2258.0], [14.9, 2263.0], [15.0, 2266.0], [15.1, 2266.0], [15.2, 2268.0], [15.3, 2290.0], [15.4, 2301.0], [15.5, 2309.0], [15.6, 2309.0], [15.7, 2313.0], [15.8, 2336.0], [15.9, 2337.0], [16.0, 2339.0], [16.1, 2339.0], [16.2, 2344.0], [16.3, 2355.0], [16.4, 2359.0], [16.5, 2389.0], [16.6, 2389.0], [16.7, 2390.0], [16.8, 2396.0], [16.9, 2416.0], [17.0, 2418.0], [17.1, 2418.0], [17.2, 2423.0], [17.3, 2425.0], [17.4, 2425.0], [17.5, 2426.0], [17.6, 2426.0], [17.7, 2433.0], [17.8, 2434.0], [17.9, 2440.0], [18.0, 2450.0], [18.1, 2450.0], [18.2, 2451.0], [18.3, 2454.0], [18.4, 2455.0], [18.5, 2456.0], [18.6, 2456.0], [18.7, 2463.0], [18.8, 2476.0], [18.9, 2481.0], [19.0, 2494.0], [19.1, 2494.0], [19.2, 2505.0], [19.3, 2533.0], [19.4, 2533.0], [19.5, 2536.0], [19.6, 2536.0], [19.7, 2550.0], [19.8, 2560.0], [19.9, 2562.0], [20.0, 2562.0], [20.1, 2562.0], [20.2, 2563.0], [20.3, 2576.0], [20.4, 2580.0], [20.5, 2591.0], [20.6, 2591.0], [20.7, 2594.0], [20.8, 2597.0], [20.9, 2635.0], [21.0, 2645.0], [21.1, 2645.0], [21.2, 2649.0], [21.3, 2663.0], [21.4, 2665.0], [21.5, 2671.0], [21.6, 2671.0], [21.7, 2682.0], [21.8, 2704.0], [21.9, 2712.0], [22.0, 2715.0], [22.1, 2715.0], [22.2, 2725.0], [22.3, 2730.0], [22.4, 2736.0], [22.5, 2750.0], [22.6, 2750.0], [22.7, 2755.0], [22.8, 2764.0], [22.9, 2765.0], [23.0, 2782.0], [23.1, 2782.0], [23.2, 2787.0], [23.3, 2796.0], [23.4, 2806.0], [23.5, 2813.0], [23.6, 2813.0], [23.7, 2828.0], [23.8, 2830.0], [23.9, 2836.0], [24.0, 2840.0], [24.1, 2840.0], [24.2, 2841.0], [24.3, 2858.0], [24.4, 2874.0], [24.5, 2883.0], [24.6, 2883.0], [24.7, 2890.0], [24.8, 2893.0], [24.9, 2896.0], [25.0, 2907.0], [25.1, 2907.0], [25.2, 2913.0], [25.3, 2939.0], [25.4, 2959.0], [25.5, 2959.0], [25.6, 2959.0], [25.7, 2968.0], [25.8, 2974.0], [25.9, 2978.0], [26.0, 2982.0], [26.1, 2982.0], [26.2, 2993.0], [26.3, 2994.0], [26.4, 3002.0], [26.5, 3004.0], [26.6, 3004.0], [26.7, 3019.0], [26.8, 3030.0], [26.9, 3030.0], [27.0, 3032.0], [27.1, 3032.0], [27.2, 3045.0], [27.3, 3079.0], [27.4, 3081.0], [27.5, 3093.0], [27.6, 3093.0], [27.7, 3121.0], [27.8, 3137.0], [27.9, 3167.0], [28.0, 3171.0], [28.1, 3171.0], [28.2, 3196.0], [28.3, 3203.0], [28.4, 3220.0], [28.5, 3220.0], [28.6, 3220.0], [28.7, 3223.0], [28.8, 3229.0], [28.9, 3236.0], [29.0, 3238.0], [29.1, 3238.0], [29.2, 3255.0], [29.3, 3255.0], [29.4, 3269.0], [29.5, 3282.0], [29.6, 3282.0], [29.7, 3287.0], [29.8, 3290.0], [29.9, 3306.0], [30.0, 3322.0], [30.1, 3322.0], [30.2, 3328.0], [30.3, 3336.0], [30.4, 3338.0], [30.5, 3341.0], [30.6, 3341.0], [30.7, 3347.0], [30.8, 3351.0], [30.9, 3359.0], [31.0, 3365.0], [31.1, 3365.0], [31.2, 3386.0], [31.3, 3400.0], [31.4, 3400.0], [31.5, 3410.0], [31.6, 3410.0], [31.7, 3437.0], [31.8, 3443.0], [31.9, 3459.0], [32.0, 3463.0], [32.1, 3463.0], [32.2, 3463.0], [32.3, 3489.0], [32.4, 3505.0], [32.5, 3510.0], [32.6, 3510.0], [32.7, 3515.0], [32.8, 3516.0], [32.9, 3541.0], [33.0, 3579.0], [33.1, 3579.0], [33.2, 3600.0], [33.3, 3605.0], [33.4, 3607.0], [33.5, 3613.0], [33.6, 3613.0], [33.7, 3621.0], [33.8, 3622.0], [33.9, 3632.0], [34.0, 3638.0], [34.1, 3638.0], [34.2, 3639.0], [34.3, 3640.0], [34.4, 3642.0], [34.5, 3671.0], [34.6, 3671.0], [34.7, 3671.0], [34.8, 3677.0], [34.9, 3679.0], [35.0, 3692.0], [35.1, 3692.0], [35.2, 3693.0], [35.3, 3695.0], [35.4, 3709.0], [35.5, 3713.0], [35.6, 3713.0], [35.7, 3722.0], [35.8, 3724.0], [35.9, 3728.0], [36.0, 3731.0], [36.1, 3731.0], [36.2, 3742.0], [36.3, 3747.0], [36.4, 3760.0], [36.5, 3767.0], [36.6, 3767.0], [36.7, 3768.0], [36.8, 3777.0], [36.9, 3784.0], [37.0, 3792.0], [37.1, 3792.0], [37.2, 3792.0], [37.3, 3795.0], [37.4, 3800.0], [37.5, 3800.0], [37.6, 3800.0], [37.7, 3804.0], [37.8, 3804.0], [37.9, 3826.0], [38.0, 3827.0], [38.1, 3827.0], [38.2, 3831.0], [38.3, 3836.0], [38.4, 3844.0], [38.5, 3844.0], [38.6, 3844.0], [38.7, 3848.0], [38.8, 3852.0], [38.9, 3854.0], [39.0, 3857.0], [39.1, 3857.0], [39.2, 3860.0], [39.3, 3862.0], [39.4, 3866.0], [39.5, 3868.0], [39.6, 3868.0], [39.7, 3877.0], [39.8, 3879.0], [39.9, 3881.0], [40.0, 3881.0], [40.1, 3881.0], [40.2, 3884.0], [40.3, 3887.0], [40.4, 3896.0], [40.5, 3901.0], [40.6, 3901.0], [40.7, 3903.0], [40.8, 3910.0], [40.9, 3958.0], [41.0, 3958.0], [41.1, 3958.0], [41.2, 3964.0], [41.3, 3994.0], [41.4, 4000.0], [41.5, 4027.0], [41.6, 4027.0], [41.7, 4033.0], [41.8, 4042.0], [41.9, 4044.0], [42.0, 4047.0], [42.1, 4047.0], [42.2, 4048.0], [42.3, 4059.0], [42.4, 4092.0], [42.5, 4104.0], [42.6, 4104.0], [42.7, 4120.0], [42.8, 4136.0], [42.9, 4140.0], [43.0, 4160.0], [43.1, 4160.0], [43.2, 4169.0], [43.3, 4175.0], [43.4, 4183.0], [43.5, 4194.0], [43.6, 4194.0], [43.7, 4199.0], [43.8, 4203.0], [43.9, 4213.0], [44.0, 4235.0], [44.1, 4235.0], [44.2, 4236.0], [44.3, 4241.0], [44.4, 4269.0], [44.5, 4270.0], [44.6, 4270.0], [44.7, 4292.0], [44.8, 4316.0], [44.9, 4341.0], [45.0, 4386.0], [45.1, 4386.0], [45.2, 4496.0], [45.3, 4552.0], [45.4, 4562.0], [45.5, 4567.0], [45.6, 4567.0], [45.7, 4578.0], [45.8, 4607.0], [45.9, 4614.0], [46.0, 4627.0], [46.1, 4627.0], [46.2, 4639.0], [46.3, 4643.0], [46.4, 4650.0], [46.5, 4658.0], [46.6, 4658.0], [46.7, 4671.0], [46.8, 4699.0], [46.9, 4719.0], [47.0, 4720.0], [47.1, 4720.0], [47.2, 4730.0], [47.3, 4812.0], [47.4, 4815.0], [47.5, 4821.0], [47.6, 4821.0], [47.7, 4828.0], [47.8, 4829.0], [47.9, 4830.0], [48.0, 4841.0], [48.1, 4841.0], [48.2, 4863.0], [48.3, 4880.0], [48.4, 4919.0], [48.5, 4927.0], [48.6, 4927.0], [48.7, 4930.0], [48.8, 5017.0], [48.9, 5044.0], [49.0, 5060.0], [49.1, 5060.0], [49.2, 5063.0], [49.3, 5076.0], [49.4, 5085.0], [49.5, 5098.0], [49.6, 5098.0], [49.7, 5107.0], [49.8, 5111.0], [49.9, 5122.0], [50.0, 5127.0], [50.1, 5127.0], [50.2, 5167.0], [50.3, 5170.0], [50.4, 5173.0], [50.5, 5181.0], [50.6, 5181.0], [50.7, 5192.0], [50.8, 5222.0], [50.9, 5223.0], [51.0, 5224.0], [51.1, 5224.0], [51.2, 5234.0], [51.3, 5237.0], [51.4, 5267.0], [51.5, 5280.0], [51.6, 5280.0], [51.7, 5284.0], [51.8, 5299.0], [51.9, 5336.0], [52.0, 5346.0], [52.1, 5346.0], [52.2, 5348.0], [52.3, 5366.0], [52.4, 5391.0], [52.5, 5420.0], [52.6, 5420.0], [52.7, 5442.0], [52.8, 5461.0], [52.9, 5475.0], [53.0, 5478.0], [53.1, 5478.0], [53.2, 5495.0], [53.3, 5506.0], [53.4, 5506.0], [53.5, 5518.0], [53.6, 5518.0], [53.7, 5537.0], [53.8, 5548.0], [53.9, 5631.0], [54.0, 5641.0], [54.1, 5641.0], [54.2, 5691.0], [54.3, 5769.0], [54.4, 5807.0], [54.5, 5807.0], [54.6, 5807.0], [54.7, 5834.0], [54.8, 5854.0], [54.9, 5855.0], [55.0, 5858.0], [55.1, 5858.0], [55.2, 5871.0], [55.3, 5886.0], [55.4, 5906.0], [55.5, 5911.0], [55.6, 5911.0], [55.7, 5933.0], [55.8, 5933.0], [55.9, 5935.0], [56.0, 5938.0], [56.1, 5938.0], [56.2, 5956.0], [56.3, 5963.0], [56.4, 5989.0], [56.5, 5989.0], [56.6, 5989.0], [56.7, 5991.0], [56.8, 6010.0], [56.9, 6042.0], [57.0, 6046.0], [57.1, 6046.0], [57.2, 6051.0], [57.3, 6055.0], [57.4, 6061.0], [57.5, 6065.0], [57.6, 6065.0], [57.7, 6101.0], [57.8, 6106.0], [57.9, 6106.0], [58.0, 6119.0], [58.1, 6119.0], [58.2, 6121.0], [58.3, 6123.0], [58.4, 6134.0], [58.5, 6157.0], [58.6, 6157.0], [58.7, 6163.0], [58.8, 6165.0], [58.9, 6179.0], [59.0, 6192.0], [59.1, 6192.0], [59.2, 6212.0], [59.3, 6213.0], [59.4, 6245.0], [59.5, 6288.0], [59.6, 6288.0], [59.7, 6290.0], [59.8, 6294.0], [59.9, 6365.0], [60.0, 6373.0], [60.1, 6373.0], [60.2, 6400.0], [60.3, 6403.0], [60.4, 6441.0], [60.5, 6455.0], [60.6, 6455.0], [60.7, 6480.0], [60.8, 6484.0], [60.9, 6494.0], [61.0, 6504.0], [61.1, 6504.0], [61.2, 6504.0], [61.3, 6517.0], [61.4, 6526.0], [61.5, 6578.0], [61.6, 6578.0], [61.7, 6587.0], [61.8, 6612.0], [61.9, 6648.0], [62.0, 6740.0], [62.1, 6740.0], [62.2, 6777.0], [62.3, 6805.0], [62.4, 6828.0], [62.5, 6870.0], [62.6, 6870.0], [62.7, 6949.0], [62.8, 6976.0], [62.9, 7015.0], [63.0, 7050.0], [63.1, 7050.0], [63.2, 7053.0], [63.3, 7109.0], [63.4, 7219.0], [63.5, 7228.0], [63.6, 7228.0], [63.7, 7233.0], [63.8, 7240.0], [63.9, 7249.0], [64.0, 7251.0], [64.1, 7251.0], [64.2, 7255.0], [64.3, 7266.0], [64.4, 7267.0], [64.5, 7276.0], [64.6, 7276.0], [64.7, 7277.0], [64.8, 7280.0], [64.9, 7282.0], [65.0, 7290.0], [65.1, 7290.0], [65.2, 7290.0], [65.3, 7296.0], [65.4, 7298.0], [65.5, 7309.0], [65.6, 7309.0], [65.7, 7319.0], [65.8, 7368.0], [65.9, 7384.0], [66.0, 7390.0], [66.1, 7390.0], [66.2, 7391.0], [66.3, 7399.0], [66.4, 7404.0], [66.5, 7409.0], [66.6, 7409.0], [66.7, 7420.0], [66.8, 7425.0], [66.9, 7432.0], [67.0, 7437.0], [67.1, 7437.0], [67.2, 7481.0], [67.3, 7483.0], [67.4, 7495.0], [67.5, 7509.0], [67.6, 7509.0], [67.7, 7564.0], [67.8, 7568.0], [67.9, 7571.0], [68.0, 7588.0], [68.1, 7588.0], [68.2, 7607.0], [68.3, 7628.0], [68.4, 7648.0], [68.5, 7680.0], [68.6, 7680.0], [68.7, 7700.0], [68.8, 7712.0], [68.9, 7719.0], [69.0, 7719.0], [69.1, 7719.0], [69.2, 7730.0], [69.3, 7754.0], [69.4, 7766.0], [69.5, 7774.0], [69.6, 7774.0], [69.7, 7776.0], [69.8, 7777.0], [69.9, 7778.0], [70.0, 7800.0], [70.1, 7800.0], [70.2, 7806.0], [70.3, 7808.0], [70.4, 7859.0], [70.5, 7869.0], [70.6, 7869.0], [70.7, 7870.0], [70.8, 7877.0], [70.9, 7896.0], [71.0, 7909.0], [71.1, 7909.0], [71.2, 7915.0], [71.3, 7919.0], [71.4, 7934.0], [71.5, 7940.0], [71.6, 7940.0], [71.7, 7963.0], [71.8, 7966.0], [71.9, 7968.0], [72.0, 7982.0], [72.1, 7982.0], [72.2, 7986.0], [72.3, 8000.0], [72.4, 8011.0], [72.5, 8019.0], [72.6, 8019.0], [72.7, 8020.0], [72.8, 8025.0], [72.9, 8025.0], [73.0, 8027.0], [73.1, 8027.0], [73.2, 8042.0], [73.3, 8044.0], [73.4, 8045.0], [73.5, 8058.0], [73.6, 8058.0], [73.7, 8064.0], [73.8, 8071.0], [73.9, 8096.0], [74.0, 8107.0], [74.1, 8107.0], [74.2, 8142.0], [74.3, 8146.0], [74.4, 8149.0], [74.5, 8158.0], [74.6, 8158.0], [74.7, 8179.0], [74.8, 8186.0], [74.9, 8213.0], [75.0, 8220.0], [75.1, 8220.0], [75.2, 8222.0], [75.3, 8230.0], [75.4, 8241.0], [75.5, 8247.0], [75.6, 8247.0], [75.7, 8351.0], [75.8, 8381.0], [75.9, 8384.0], [76.0, 8400.0], [76.1, 8400.0], [76.2, 8411.0], [76.3, 8441.0], [76.4, 8476.0], [76.5, 8477.0], [76.6, 8477.0], [76.7, 8481.0], [76.8, 8501.0], [76.9, 8533.0], [77.0, 8548.0], [77.1, 8548.0], [77.2, 8551.0], [77.3, 8555.0], [77.4, 8557.0], [77.5, 8593.0], [77.6, 8593.0], [77.7, 8596.0], [77.8, 8602.0], [77.9, 8607.0], [78.0, 8619.0], [78.1, 8619.0], [78.2, 8628.0], [78.3, 8634.0], [78.4, 8642.0], [78.5, 8649.0], [78.6, 8649.0], [78.7, 8663.0], [78.8, 8665.0], [78.9, 8666.0], [79.0, 8683.0], [79.1, 8683.0], [79.2, 8695.0], [79.3, 8708.0], [79.4, 8716.0], [79.5, 8720.0], [79.6, 8720.0], [79.7, 8731.0], [79.8, 8769.0], [79.9, 8795.0], [80.0, 8840.0], [80.1, 8840.0], [80.2, 8851.0], [80.3, 8857.0], [80.4, 8859.0], [80.5, 8917.0], [80.6, 8917.0], [80.7, 8990.0], [80.8, 9041.0], [80.9, 9049.0], [81.0, 9064.0], [81.1, 9064.0], [81.2, 9135.0], [81.3, 9159.0], [81.4, 9208.0], [81.5, 9227.0], [81.6, 9227.0], [81.7, 9281.0], [81.8, 9287.0], [81.9, 9304.0], [82.0, 9312.0], [82.1, 9312.0], [82.2, 9427.0], [82.3, 9462.0], [82.4, 9573.0], [82.5, 9585.0], [82.6, 9585.0], [82.7, 9599.0], [82.8, 9737.0], [82.9, 9762.0], [83.0, 9779.0], [83.1, 9779.0], [83.2, 9787.0], [83.3, 9807.0], [83.4, 9860.0], [83.5, 9887.0], [83.6, 9887.0], [83.7, 10086.0], [83.8, 10097.0], [83.9, 10166.0], [84.0, 10166.0], [84.1, 10166.0], [84.2, 10227.0], [84.3, 10252.0], [84.4, 10293.0], [84.5, 10392.0], [84.6, 10392.0], [84.7, 10484.0], [84.8, 10497.0], [84.9, 10501.0], [85.0, 10525.0], [85.1, 10525.0], [85.2, 10674.0], [85.3, 10720.0], [85.4, 10939.0], [85.5, 11015.0], [85.6, 11015.0], [85.7, 11040.0], [85.8, 11108.0], [85.9, 11136.0], [86.0, 11150.0], [86.1, 11150.0], [86.2, 11159.0], [86.3, 11163.0], [86.4, 11218.0], [86.5, 11263.0], [86.6, 11263.0], [86.7, 11280.0], [86.8, 11329.0], [86.9, 11361.0], [87.0, 11392.0], [87.1, 11392.0], [87.2, 11471.0], [87.3, 11575.0], [87.4, 11681.0], [87.5, 11688.0], [87.6, 11688.0], [87.7, 11695.0], [87.8, 11715.0], [87.9, 11935.0], [88.0, 11953.0], [88.1, 11953.0], [88.2, 12006.0], [88.3, 12068.0], [88.4, 12125.0], [88.5, 12286.0], [88.6, 12286.0], [88.7, 12297.0], [88.8, 12357.0], [88.9, 12359.0], [89.0, 12412.0], [89.1, 12412.0], [89.2, 12539.0], [89.3, 12541.0], [89.4, 12600.0], [89.5, 12654.0], [89.6, 12654.0], [89.7, 12733.0], [89.8, 12736.0], [89.9, 12865.0], [90.0, 12960.0], [90.1, 12960.0], [90.2, 13086.0], [90.3, 13107.0], [90.4, 13136.0], [90.5, 13630.0], [90.6, 13630.0], [90.7, 13848.0], [90.8, 13849.0], [90.9, 13915.0], [91.0, 13984.0], [91.1, 13984.0], [91.2, 14027.0], [91.3, 14150.0], [91.4, 14296.0], [91.5, 14421.0], [91.6, 14421.0], [91.7, 14610.0], [91.8, 14794.0], [91.9, 14998.0], [92.0, 15077.0], [92.1, 15077.0], [92.2, 15082.0], [92.3, 15187.0], [92.4, 15220.0], [92.5, 15225.0], [92.6, 15225.0], [92.7, 15230.0], [92.8, 15242.0], [92.9, 15247.0], [93.0, 15258.0], [93.1, 15258.0], [93.2, 15261.0], [93.3, 15262.0], [93.4, 15263.0], [93.5, 15265.0], [93.6, 15265.0], [93.7, 15269.0], [93.8, 15272.0], [93.9, 15273.0], [94.0, 15274.0], [94.1, 15274.0], [94.2, 15275.0], [94.3, 15276.0], [94.4, 15277.0], [94.5, 15314.0], [94.6, 15314.0], [94.7, 15321.0], [94.8, 15329.0], [94.9, 15348.0], [95.0, 15353.0], [95.1, 15353.0], [95.2, 15365.0], [95.3, 15428.0], [95.4, 15485.0], [95.5, 15781.0], [95.6, 15781.0], [95.7, 15796.0], [95.8, 15801.0], [95.9, 15927.0], [96.0, 16286.0], [96.1, 16286.0], [96.2, 16324.0], [96.3, 16383.0], [96.4, 16385.0], [96.5, 16495.0], [96.6, 16495.0], [96.7, 16523.0], [96.8, 16526.0], [96.9, 16553.0], [97.0, 16602.0], [97.1, 16602.0], [97.2, 16673.0], [97.3, 16692.0], [97.4, 16861.0], [97.5, 17342.0], [97.6, 17342.0], [97.7, 17557.0], [97.8, 17745.0], [97.9, 17985.0], [98.0, 18075.0], [98.1, 18075.0], [98.2, 18296.0], [98.3, 18336.0], [98.4, 18346.0], [98.5, 18372.0], [98.6, 18372.0], [98.7, 18391.0], [98.8, 18467.0], [98.9, 18521.0], [99.0, 18550.0], [99.1, 18550.0], [99.2, 18566.0], [99.3, 18619.0], [99.4, 18692.0], [99.5, 18745.0], [99.6, 18745.0], [99.7, 19352.0], [99.8, 22352.0], [99.9, 22906.0]], "isOverall": false, "label": "best-seller-books", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 700.0, "maxY": 25.0, "series": [{"data": [[700.0, 2.0], [800.0, 2.0], [900.0, 4.0], [1000.0, 5.0], [1100.0, 4.0], [1200.0, 3.0], [1300.0, 2.0], [1400.0, 10.0], [1500.0, 17.0], [1600.0, 4.0], [1700.0, 9.0], [1800.0, 11.0], [1900.0, 15.0], [2000.0, 7.0], [2100.0, 13.0], [2200.0, 15.0], [2300.0, 12.0], [2400.0, 18.0], [2500.0, 14.0], [2600.0, 7.0], [2700.0, 13.0], [2800.0, 13.0], [2900.0, 11.0], [3000.0, 10.0], [3100.0, 5.0], [3200.0, 13.0], [3300.0, 11.0], [3400.0, 9.0], [3500.0, 6.0], [3600.0, 18.0], [3700.0, 16.0], [3800.0, 25.0], [3900.0, 7.0], [4000.0, 9.0], [4200.0, 8.0], [4100.0, 10.0], [4300.0, 3.0], [4600.0, 9.0], [4500.0, 4.0], [4400.0, 1.0], [4700.0, 3.0], [4800.0, 9.0], [5000.0, 7.0], [5100.0, 9.0], [4900.0, 3.0], [5200.0, 9.0], [5300.0, 5.0], [5400.0, 6.0], [5500.0, 5.0], [5600.0, 3.0], [5800.0, 8.0], [5700.0, 1.0], [6000.0, 7.0], [6100.0, 12.0], [5900.0, 11.0], [6200.0, 6.0], [6300.0, 2.0], [6400.0, 7.0], [6500.0, 6.0], [6600.0, 2.0], [6900.0, 2.0], [6800.0, 3.0], [6700.0, 2.0], [7000.0, 3.0], [7100.0, 1.0], [7200.0, 17.0], [7400.0, 9.0], [7300.0, 7.0], [7600.0, 4.0], [7500.0, 5.0], [7900.0, 10.0], [7800.0, 8.0], [7700.0, 11.0], [8100.0, 7.0], [8000.0, 14.0], [8200.0, 6.0], [8600.0, 12.0], [8300.0, 3.0], [8400.0, 6.0], [8700.0, 6.0], [8500.0, 8.0], [9200.0, 4.0], [9100.0, 2.0], [9000.0, 3.0], [8900.0, 2.0], [8800.0, 4.0], [9700.0, 4.0], [9500.0, 3.0], [9300.0, 2.0], [9400.0, 2.0], [9800.0, 3.0], [10000.0, 2.0], [10100.0, 2.0], [10200.0, 3.0], [10500.0, 2.0], [10600.0, 1.0], [10400.0, 2.0], [10700.0, 1.0], [10300.0, 1.0], [11100.0, 5.0], [11200.0, 3.0], [10900.0, 1.0], [11000.0, 2.0], [11600.0, 3.0], [11300.0, 3.0], [11700.0, 1.0], [11400.0, 1.0], [11500.0, 1.0], [11900.0, 2.0], [12100.0, 1.0], [12200.0, 2.0], [12000.0, 2.0], [12600.0, 2.0], [12700.0, 2.0], [12300.0, 2.0], [12400.0, 1.0], [12500.0, 2.0], [13000.0, 1.0], [13100.0, 2.0], [12900.0, 1.0], [12800.0, 1.0], [13600.0, 1.0], [13800.0, 2.0], [14200.0, 1.0], [14100.0, 1.0], [14000.0, 1.0], [13900.0, 2.0], [14600.0, 1.0], [14400.0, 1.0], [14700.0, 1.0], [15200.0, 17.0], [15300.0, 6.0], [15000.0, 2.0], [14900.0, 1.0], [15100.0, 1.0], [15400.0, 2.0], [15800.0, 1.0], [15700.0, 2.0], [15900.0, 1.0], [16300.0, 3.0], [16200.0, 1.0], [16400.0, 1.0], [16600.0, 3.0], [16800.0, 1.0], [17300.0, 1.0], [16500.0, 3.0], [17700.0, 1.0], [17900.0, 1.0], [18300.0, 4.0], [18400.0, 1.0], [17500.0, 1.0], [18000.0, 1.0], [18200.0, 1.0], [18600.0, 2.0], [18700.0, 1.0], [18500.0, 3.0], [19300.0, 1.0], [22300.0, 1.0], [22900.0, 1.0]], "isOverall": false, "label": "best-seller-books", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 22900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 763.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 33.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 763.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 4.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 166.1117824773415, "minX": 1.64776344E12, "maxY": 336.9957356076759, "series": [{"data": [[1.64776344E12, 336.9957356076759], [1.6477635E12, 166.1117824773415]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6477635E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1088.0, "minX": 1.0, "maxY": 22906.0, "series": [{"data": [[2.0, 22906.0], [3.0, 18346.0], [4.0, 18521.0], [5.0, 22352.0], [6.0, 18296.0], [7.0, 19352.0], [8.0, 18372.0], [9.0, 18391.0], [10.0, 18550.0], [11.0, 16523.0], [12.0, 18566.0], [13.0, 16286.0], [14.0, 16553.0], [15.0, 18075.0], [16.0, 15277.0], [17.0, 17557.0], [18.0, 15485.0], [19.0, 15242.0], [20.0, 18745.0], [21.0, 18619.0], [22.0, 16526.0], [23.0, 16324.0], [24.0, 16385.0], [25.0, 18467.0], [26.0, 17342.0], [27.0, 18336.0], [28.0, 15781.0], [29.0, 15261.0], [30.0, 18692.0], [31.0, 17985.0], [33.0, 13107.0], [32.0, 16692.0], [35.0, 15220.0], [34.0, 15187.0], [37.0, 12865.0], [36.0, 15230.0], [39.0, 16861.0], [38.0, 15353.0], [41.0, 16673.0], [40.0, 17745.0], [43.0, 14998.0], [42.0, 14794.0], [45.0, 11040.0], [44.0, 13849.0], [47.0, 13915.0], [46.0, 11575.0], [49.0, 15225.0], [48.0, 15796.0], [51.0, 13877.0], [53.0, 8400.0], [52.0, 15263.0], [55.0, 12539.0], [54.0, 16602.0], [57.0, 12541.0], [56.0, 8501.0], [59.0, 10166.0], [58.0, 16495.0], [61.0, 13984.0], [60.0, 15247.0], [63.0, 8441.0], [62.0, 14027.0], [67.0, 11263.0], [66.0, 14150.0], [65.0, 12412.0], [64.0, 8548.0], [71.0, 8665.0], [70.0, 8146.0], [69.0, 12006.0], [68.0, 7915.0], [75.0, 11163.0], [74.0, 15273.0], [73.0, 15269.0], [72.0, 15275.0], [79.0, 8708.0], [78.0, 15082.0], [77.0, 15077.0], [76.0, 15927.0], [83.0, 12286.0], [82.0, 11723.5], [80.0, 15365.0], [87.0, 15428.0], [86.0, 15348.0], [85.0, 15314.0], [84.0, 15321.0], [91.0, 11471.0], [90.0, 14610.0], [89.0, 15329.0], [88.0, 14421.0], [95.0, 15258.0], [94.0, 11150.0], [93.0, 8351.0], [92.0, 8045.0], [99.0, 7919.0], [98.0, 7319.0], [97.0, 8477.0], [96.0, 8071.0], [103.0, 7249.0], [102.0, 7255.0], [101.0, 7276.0], [100.0, 7277.0], [107.0, 15272.0], [106.0, 15276.0], [105.0, 15265.0], [104.0, 7963.0], [111.0, 15262.0], [110.0, 7968.0], [109.0, 11978.5], [115.0, 7877.0], [114.0, 12068.0], [113.0, 11681.0], [112.0, 7909.0], [119.0, 7290.0], [118.0, 7806.0], [117.0, 9182.0], [123.0, 7947.0], [121.0, 8251.5], [127.0, 9108.666666666666], [124.0, 12654.0], [135.0, 8241.0], [134.0, 7859.0], [133.0, 7719.0], [132.0, 10293.0], [131.0, 8917.0], [130.0, 7280.0], [129.0, 11715.0], [128.0, 7778.0], [143.0, 7719.0], [142.0, 9462.0], [141.0, 14296.0], [140.0, 12960.0], [139.0, 10392.0], [138.0, 8107.0], [137.0, 7730.0], [136.0, 8642.0], [151.0, 7776.0], [150.0, 9248.5], [148.0, 8000.0], [147.0, 11015.0], [146.0, 7282.0], [145.0, 7980.5], [159.0, 10694.0], [157.0, 8628.0], [156.0, 7368.0], [155.0, 8619.0], [154.0, 7296.0], [153.0, 7290.0], [152.0, 8025.0], [167.0, 4327.285714285715], [166.0, 1940.4], [165.0, 4423.333333333333], [163.0, 3931.2], [162.0, 4064.3333333333335], [161.0, 2062.0], [160.0, 5634.666666666666], [164.0, 5093.5], [174.0, 3371.6], [173.0, 3535.0], [170.0, 1561.0], [168.0, 2674.8], [169.0, 2532.0], [175.0, 7109.0], [171.0, 9595.0], [183.0, 5102.5], [182.0, 2495.5], [180.0, 1088.0], [179.0, 2210.6], [177.0, 4543.0], [176.0, 4062.0], [178.0, 3758.333333333333], [181.0, 4289.0], [190.0, 5096.5], [188.0, 4084.25], [186.0, 3318.25], [184.0, 8043.0], [191.0, 5420.0], [189.0, 7437.0], [187.0, 6101.0], [185.0, 12359.0], [194.0, 3371.666666666667], [195.0, 5917.0], [196.0, 3948.0], [197.0, 5645.0], [198.0, 3594.666666666667], [199.0, 8058.0], [193.0, 8716.0], [192.0, 10227.0], [203.0, 2430.8571428571427], [207.0, 7217.666666666667], [206.0, 2889.0], [205.0, 3122.6], [204.0, 3862.5], [202.0, 8064.0], [201.0, 6612.0], [200.0, 9427.0], [208.0, 2195.0], [209.0, 2610.6666666666665], [210.0, 7497.5], [215.0, 7420.0], [214.0, 7777.0], [213.0, 7409.0], [212.0, 5170.0], [211.0, 8551.0], [217.0, 6599.0], [221.0, 4106.5], [220.0, 3577.0], [222.0, 5495.0], [219.0, 7607.0], [218.0, 4919.0], [216.0, 7483.0], [227.0, 6546.666666666667], [228.0, 4371.0], [229.0, 3765.6666666666665], [230.0, 4220.0], [231.0, 8731.0], [225.0, 8096.0], [224.0, 6946.0], [233.0, 4926.5], [234.0, 3936.0], [235.0, 4175.5], [237.0, 4238.0], [239.0, 6777.0], [238.0, 8769.0], [236.0, 6212.0], [232.0, 7432.0], [247.0, 7934.0], [246.0, 11159.0], [245.0, 12125.0], [244.0, 9312.0], [243.0, 7509.0], [242.0, 7233.0], [241.0, 8042.0], [240.0, 12600.0], [254.0, 6626.0], [255.0, 7966.0], [253.0, 11935.0], [252.0, 8167.5], [250.0, 6459.0], [248.0, 7481.0], [271.0, 6215.5], [262.0, 5787.0], [263.0, 4830.0], [269.0, 4676.0], [259.0, 7050.0], [258.0, 5750.666666666667], [267.0, 6517.0], [266.0, 8179.0], [265.0, 6119.0], [264.0, 11392.0], [261.0, 8859.0], [260.0, 5044.0], [272.0, 3252.0], [276.0, 3330.0], [277.0, 6163.0], [279.0, 7267.0], [278.0, 6051.0], [280.0, 3764.0], [281.0, 2649.0], [287.0, 3831.0], [286.0, 3879.0], [285.0, 6721.5], [275.0, 4169.0], [274.0, 11280.0], [273.0, 6134.0], [283.0, 7870.0], [282.0, 3994.0], [301.0, 3731.0], [298.0, 3315.0], [300.0, 3215.25], [291.0, 4821.0], [290.0, 3827.0], [289.0, 7628.0], [288.0, 8027.0], [299.0, 3144.25], [303.0, 5101.333333333333], [297.0, 5222.0], [296.0, 11329.0], [295.0, 11218.0], [294.0, 3958.0], [293.0, 7053.0], [292.0, 8857.0], [317.0, 4854.0], [304.0, 2621.6666666666665], [305.0, 4671.0], [306.0, 7774.0], [310.0, 3243.3333333333335], [309.0, 4213.0], [308.0, 4044.0], [311.0, 8020.0], [318.0, 2491.6], [319.0, 6012.5], [316.0, 6504.0], [307.0, 4841.0], [315.0, 4027.0], [314.0, 3848.0], [313.0, 5336.0], [312.0, 6373.0], [333.0, 4426.0], [322.0, 4926.5], [323.0, 5240.5], [321.0, 4020.3333333333335], [327.0, 3677.0], [326.0, 7766.0], [325.0, 3054.0], [324.0, 5964.5], [330.0, 6206.5], [331.0, 3021.5], [335.0, 6400.0], [329.0, 7251.0], [328.0, 3868.0], [334.0, 11361.0], [351.0, 4562.0], [347.0, 4961.666666666666], [346.0, 2784.0], [348.0, 3800.0], [339.0, 3854.0], [338.0, 8990.0], [337.0, 9304.0], [336.0, 3826.0], [350.0, 4122.125], [349.0, 5118.25], [345.0, 3347.0], [344.0, 7896.0], [343.0, 6157.0], [342.0, 8663.0], [341.0, 4092.0], [340.0, 5280.0], [366.0, 3947.8333333333335], [357.0, 5114.25], [356.0, 3792.0], [360.0, 3637.5], [367.0, 3119.6666666666665], [359.0, 1791.5], [362.0, 3433.75], [361.0, 6228.0], [364.0, 4710.833333333334], [355.0, 7015.0], [354.0, 9287.0], [353.0, 2736.0], [352.0, 5098.0], [365.0, 3825.5], [363.0, 4795.0], [383.0, 2969.6666666666665], [371.0, 4387.0], [372.0, 6046.0], [373.0, 4969.0], [375.0, 5886.0], [368.0, 3045.0], [370.0, 4720.0], [369.0, 6294.0], [374.0, 7425.0], [376.0, 4905.0], [377.0, 3784.0], [378.0, 4617.2], [379.0, 3617.0], [382.0, 2813.0], [381.0, 8795.0], [380.0, 5506.0], [386.0, 3622.8333333333335], [387.0, 4563.0], [388.0, 3848.3333333333335], [385.0, 4230.0], [390.0, 3993.6666666666665], [389.0, 6930.5], [391.0, 4173.333333333334], [384.0, 4000.0], [396.0, 2712.5], [399.0, 5234.0], [393.0, 6578.0], [392.0, 9860.0], [395.0, 9787.0], [394.0, 5223.0], [398.0, 9041.0], [397.0, 4930.0], [414.0, 4033.0], [403.0, 3363.3333333333335], [401.0, 5567.0], [400.0, 9585.0], [402.0, 4203.0], [410.0, 8176.5], [411.0, 3321.6666666666665], [409.0, 3891.3333333333335], [413.0, 9744.0], [408.0, 3755.3333333333335], [405.0, 5111.0], [404.0, 3223.0], [418.0, 2504.0], [419.0, 5862.0], [417.0, 2200.5], [416.0, 6016.0], [427.0, 4570.0], [428.0, 4499.5], [426.0, 4355.5], [425.0, 4069.2222222222213], [424.0, 4708.0], [429.0, 4537.75], [431.0, 4704.25], [430.0, 2983.0], [421.0, 2481.0], [422.0, 4149.5], [423.0, 5934.0], [420.0, 3600.3333333333335], [444.0, 5275.666666666667], [433.0, 4978.5], [435.0, 7648.0], [434.0, 6165.0], [432.0, 3358.0], [439.0, 4743.0], [438.0, 3607.0], [437.0, 5631.0], [436.0, 4241.0], [443.0, 5037.2], [442.0, 3086.1666666666665], [446.0, 4955.25], [447.0, 2782.0], [441.0, 5017.0], [440.0, 1700.0], [445.0, 3836.0], [449.0, 4797.166666666667], [450.0, 6928.0], [451.0, 9159.0], [461.0, 4048.0], [460.0, 7808.0], [448.0, 5933.0], [452.0, 5810.25], [457.0, 3588.25], [455.0, 8683.0], [454.0, 3930.666666666667], [453.0, 4643.0], [458.0, 2273.3333333333335], [459.0, 3437.0], [462.0, 2798.5], [463.0, 1800.0], [456.0, 1707.0], [467.0, 3768.0], [472.0, 5167.5], [468.0, 4078.0], [475.0, 7545.0], [476.0, 3030.0], [466.0, 4120.0], [465.0, 3255.0], [464.0, 8602.0], [474.0, 2389.0], [473.0, 5076.0], [471.0, 7982.0], [470.0, 5299.0], [469.0, 7219.0], [1.0, 16383.0]], "isOverall": false, "label": "best-seller-books", "isController": false}, {"data": [[266.2925000000004, 6276.423750000002]], "isOverall": false, "label": "best-seller-books-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 476.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 741.2, "minX": 1.64776344E12, "maxY": 148501.03333333333, "series": [{"data": [[1.64776344E12, 148501.03333333333], [1.6477635E12, 103741.83333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.64776344E12, 1063.0666666666666], [1.6477635E12, 741.2]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6477635E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3814.0234541577825, "minX": 1.64776344E12, "maxY": 9765.44410876133, "series": [{"data": [[1.64776344E12, 3814.0234541577825], [1.6477635E12, 9765.44410876133]], "isOverall": false, "label": "best-seller-books", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6477635E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3801.2921108742025, "minX": 1.64776344E12, "maxY": 9595.009063444106, "series": [{"data": [[1.64776344E12, 3801.2921108742025], [1.6477635E12, 9595.009063444106]], "isOverall": false, "label": "best-seller-books", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6477635E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 2870.3049040511733, "minX": 1.64776344E12, "maxY": 8523.592145015105, "series": [{"data": [[1.64776344E12, 2870.3049040511733], [1.6477635E12, 8523.592145015105]], "isOverall": false, "label": "best-seller-books", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6477635E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 786.0, "minX": 1.64776344E12, "maxY": 22906.0, "series": [{"data": [[1.64776344E12, 11695.0], [1.6477635E12, 22906.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.64776344E12, 6870.0], [1.6477635E12, 15797.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.64776344E12, 10804.200000000004], [1.6477635E12, 19182.039999999983]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.64776344E12, 9015.5], [1.6477635E12, 17669.799999999992]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.64776344E12, 786.0], [1.6477635E12, 3137.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.64776344E12, 3269.0], [1.6477635E12, 8230.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6477635E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1972.0, "minX": 2.0, "maxY": 19644.5, "series": [{"data": [[33.0, 2841.0], [8.0, 16286.0], [2.0, 19644.5], [9.0, 15230.0], [39.0, 4607.0], [43.0, 3836.0], [42.0, 7940.0], [47.0, 8607.0], [46.0, 12146.0], [48.0, 3715.5], [12.0, 17663.5], [55.0, 5391.0], [4.0, 18433.5], [70.0, 5595.5], [69.0, 7558.0], [17.0, 13915.0], [5.0, 18470.5], [89.0, 1972.0], [22.0, 2479.5], [27.0, 2689.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 18075.0], [69.0, 11159.0], [5.0, 18372.0], [42.0, 7437.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 89.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 2.0, "maxY": 19644.5, "series": [{"data": [[33.0, 2809.0], [8.0, 16268.0], [2.0, 19644.5], [9.0, 15230.0], [39.0, 4607.0], [43.0, 3800.0], [42.0, 7940.0], [47.0, 8607.0], [46.0, 12145.0], [48.0, 3715.0], [12.0, 17639.0], [55.0, 5391.0], [4.0, 18431.5], [70.0, 5590.0], [69.0, 7558.0], [17.0, 13915.0], [5.0, 18470.0], [89.0, 1962.0], [22.0, 2479.0], [27.0, 2689.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 0.0], [69.0, 0.0], [5.0, 0.0], [42.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 89.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 13.333333333333334, "minX": 1.64776344E12, "maxY": 13.333333333333334, "series": [{"data": [[1.64776344E12, 13.333333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64776344E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.64776344E12, "maxY": 7.816666666666666, "series": [{"data": [[1.64776344E12, 7.816666666666666], [1.6477635E12, 5.45]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6477635E12, 0.06666666666666667]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6477635E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.64776344E12, "maxY": 7.816666666666666, "series": [{"data": [[1.6477635E12, 0.06666666666666667]], "isOverall": false, "label": "best-seller-books-failure", "isController": false}, {"data": [[1.64776344E12, 7.816666666666666], [1.6477635E12, 5.45]], "isOverall": false, "label": "best-seller-books-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6477635E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.64776344E12, "maxY": 7.816666666666666, "series": [{"data": [[1.64776344E12, 7.816666666666666], [1.6477635E12, 5.45]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6477635E12, 0.06666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6477635E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

